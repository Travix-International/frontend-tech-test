import path from 'path';

// import favicon from '../assets/images/favicon.ico';
// import touchicon from '../assets/images/icon.png';

function genJSTag(p) {
  return p ? `<script src=${p} type="text/javascript" charSet="utf-8"></script>` : '';
}

function genCSSTag(p) {
  return p ? `<link href=${p} rel="stylesheet" />` : '';
}

function genTag(targetPath, type) {
  let method = () => {};
  if (type === 'CSS') { method = genCSSTag; }
  if (type === 'JS') { method = genJSTag; }
  if (!Array.isArray(targetPath)) {
    targetPath = [targetPath];
  }
  const res = targetPath.reduce((accu, p) => {
    return `${accu}\n${method(p)}`;
  }, '');
  return res;
}

function getAssetInfo(asset, publicPath) {
  let js;
  let css;
  if (Array.isArray(asset)) {
    js = [];
    css = [];
    asset.forEach((a) => {
      if (/\.js$/.test(a)) { js.push(path.join(publicPath, a)); }
      if (/\.css/.test(a)) { css.push(path.join(publicPath, a)); }
    });
  } else {
    js = path.join(publicPath, asset);
  }
  return { js, css };
}

function parseStats(clientStats, currentEntry) {
  const assetsByChunkName = clientStats.assetsByChunkName;
  const publicPath = clientStats.publicPath;
  const currentEntryAsset = assetsByChunkName[currentEntry] || '';
  const mainfestAsset = assetsByChunkName.manifest || '';
  const vendorAsset = assetsByChunkName.vendor || '';
  return {
    main: getAssetInfo(currentEntryAsset, publicPath),
    manifest: getAssetInfo(mainfestAsset, publicPath),
    vendor: getAssetInfo(vendorAsset, publicPath),
  };
}

function renderFullPage(content, reduxState, head, currentEntry, clientStats) {
  const { manifest: manifestAssets, main: targetAssets, vendor: vendorAssets } = parseStats(clientStats, currentEntry);
  // const manifestAssets = assetsJSON.manifest || {};
  // const targetAssets = assetsJSON[currentEntry] || {};
  // const vendorAssets = assetsJSON.vendor || {};
  const manifestJS = genTag(manifestAssets.js, 'JS');
  const targetJS = genTag(targetAssets.js, 'JS');
  const targetCSS = genTag(targetAssets.css, 'CSS');
  const vendorJS = genTag(vendorAssets.js, 'JS');
  const vendorCSS = genTag(vendorAssets.css, 'CSS');

  return `
    <!doctype html>
    <html>
      <head>
        <meta httpEquiv="Content-Type" content="text/html; charset=UTF-8" />
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
        ${head.title.toString()}
        ${head.meta.toString()}

        <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
        ${vendorCSS}
        ${targetCSS}

        <script type="text/javascript" charSet="utf-8">
          window.__REDUX_STATE__ = ${reduxState}
        </script>
      </head>
      <body>
        <div id="app-mount-point">${content}</div>
        ${manifestJS}
        ${vendorJS}
        <!-- entry script generated by webpack -->
        ${targetJS}
      </body>
    </html>
  `;
}

export default renderFullPage;
